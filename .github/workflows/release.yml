name: Release action
run-name: Release action

on:
  workflow_dispatch:
    inputs:
      bump-level:
        type: choice
        options: [patch, minor, major]
        required: true
        description: Bump to patch or minor or major version

jobs:
  # 新しいタグをリリース
  release:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - id: bump
        name: Bump version and tag repository
        env:
          USERNAME: github-actions[bot]
          EMAIL: github-actions[bot]@users.noreply.github.com
          BUMP_LEVEL: ${{ inputs.bump-level }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "${USERNAME}"
          git config --global user.email "${EMAIL}"
          version="$(.github/scripts/bump.sh "${BUMP_LEVEL}")"
          echo "New version: ${version}"
          echo "new_version=${version}" >> $GITHUB_OUTPUT

  # リリースしたタグを元にdockerイメージをビルドしてpushする
  build-and-push:
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - context: api
            dockerfile: api/prod.Dockerfile
            image_name: sharehouse/oshi-ramen-api
          - context: view
            dockerfile: view/prod.Dockerfile
            image_name: sharehouse/oshi-ramen-view
          - context: magazine
            dockerfile: magazine/prod.Dockerfile
            image_name: sharehouse/oshi-ramen-magazine

    steps:
      # リポジトリのチェックアウト
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Secretsから.envファイルを作成
      - name: Create .env file from Secrets
        run: echo "${{ secrets.PROD_ENV }}" > .env

      # .envファイルの内容をbuild-argsとして利用できるように整形
      - name: Generate build args from .env
        id: build_args
        run: |
          echo "ARGS<<EOF" >> $GITHUB_OUTPUT
          cat .env >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 最新のタグを取得するシェルスクリプトを実行
      - name: Get latest tag
        id: get_tag
        run: |
          # タグ情報を最新にするためにfetchする
          git fetch --tags
          TAG=$(git tag --sort=-v:refname | head -n1)
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      # arm64アーキテクチャのビルドを行う場合は、以下のコメントアウトを解除してください
      # # QEMUエミュレーションのセットアップ
      # - name: Set up QEMU for multi-arch
      #   uses: docker/setup-qemu-action@v3 # QEMU エミュレーション

      # Docker Buildxのセットアップ
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # 永続ビルダー設定
        with:
          install: true
          buildkitd-flags: --debug

      # Docker Hubへのログイン
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.HARBOR_REG }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASS }}

      # Docker Buildxを使用してマルチアーキテクチャのDockerイメージをビルドし、プッシュ
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          # buildが遅すぎるので、arm64は一旦コメントアウト
          # platforms: linux/arm64,linux/amd64
          pull: true # 常に最新イメージ取得
          push: true
          tags: |
            ${{ secrets.HARBOR_REG }}/${{ matrix.image_name }}:${{ steps.get_tag.outputs.TAG }}
            ${{ secrets.HARBOR_REG }}/${{ matrix.image_name }}:latest
          build-args: ${{ steps.build_args.outputs.ARGS }}
          cache-from: |
            type=gha,scope=${{ matrix.image_name }}-cache
            type=registry,ref=${{ secrets.HARBOR_REG }}/${{ matrix.image_name }}:cache
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.image_name }}-cache
            type=registry,ref=${{ secrets.HARBOR_REG }}/${{ matrix.image_name }}:cache,mode=max,image-manifest=true

      # Docker Buildxのキャッシュをプルーニング
      - name: Prune Buildx builder and caches
        if: always()
        run: |
          docker buildx prune --all --force

  # docker buildが成功したら、kustomization.ymlを編集する
  edit-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # github appトークンを作成する
      - name: Create github app token
        id: create
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_KEY }}
          repositories: ${{ secrets.TARGET_REPO }}

      # ソースリポジトリをチェックアウト（タグ情報取得用）
      - name: Checkout source repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # タグを含むすべての履歴を取得
          path: source-repo

      # 最新のタグを取得（ソースリポジトリから）
      - name: Get latest tag
        id: get_tag
        working-directory: source-repo
        run: |
          # タグ情報を最新にするためにfetchする
          git fetch --tags
          TAG=$(git tag --sort=-v:refname | head -n1)
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      # github appトークンを使って、ターゲットリポジトリをチェックアウトする
      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/${{ secrets.TARGET_REPO }}
          token: ${{ steps.create.outputs.token }}

      # kustomization.ymlを編集するためにyqをインストールする
      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      # ターゲットリポジトリのkustomization.ymlを編集する
      - name: edit-manifest
        run: |
          cd ${{ github.event.repository.name }}
          yq e -i '.images[] |= select(.name == "${{ secrets.HARBOR_REG }}/sharehouse/oshi-ramen-view") .newTag = "${{ steps.get_tag.outputs.TAG }}"' kustomization.yml
          yq e -i '.images[] |= select(.name == "${{ secrets.HARBOR_REG }}/sharehouse/oshi-ramen-api") .newTag = "${{ steps.get_tag.outputs.TAG }}"' kustomization.yml
          yq e -i '.images[] |= select(.name == "${{ secrets.HARBOR_REG }}/sharehouse/oshi-ramen-magazine") .newTag = "${{ steps.get_tag.outputs.TAG }}"' kustomization.yml

      # ターゲットリポジトリのkustomization.ymlをコミットする
      - name: Commit changes
        working-directory: ${{ github.event.repository.name }}
        run: |
          git config --global user.name "${{ github.repository_owner }}"
          git config --global user.email "${{ github.repository_owner }}@users.noreply.github.com"
          git add -A
          git commit -m "Update kustomization.yml with :${{ steps.get_tag.outputs.TAG }}"
          git push

  # ArgoCDのsyncを実行する
  sync-argocd:
    needs: edit-manifest
    runs-on: ubuntu-latest
    steps:
      - name: Trigger ArgoCD sync via API
        run: |
          curl -X POST https://${{ secrets.ARGOCD_URL }}/api/v1/applications/${{ github.event.repository.name }}/sync \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
            -H "Content-Type: application/json"
