name: Release Docker Build and Push

on:
  workflow_run:
    workflows: ["Release action"] # 完了を待つワークフロー名
    types:
      - completed

jobs:
  build-and-push:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - dockerfile: api/prod.Dockerfile
            image_name: sharehause/oshi-ramen-api
          - dockerfile: view/prod.Dockerfile
            image_name: sharehause/oshi-ramen-view
          - dockerfile: magazine/prod.Dockerfile
            image_name: sharehause/oshi-ramen-magazine

    steps:
      # 1. リポジトリのチェックアウト
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Secretsから.envファイルを作成
      - name: Create .env file from Secrets
        run: echo "${{ secrets.PROD_ENV }}" > .env

      # 3. .envファイルの内容をbuild-argsとして利用できるように整形
      - name: Generate build args from .env
        id: build_args
        run: |
          echo "args<<EOF" >> $GITHUB_OUTPUT
          cat .env >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 4. Docker Buildxのセットアップ
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # 5. Docker Hubへログイン
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASS }}

      # 6. Dockerイメージのビルドとpush
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          # リリースタグとlatestの2種類を付与
          tags: |
            ${{ matrix.image_name }}:${{ github.event.release.tag_name }}
            ${{ matrix.image_name }}:latest
          # .envファイルの内容（各行 "KEY=VALUE" 形式）をそのままbuild-argsとして渡す
          build-args: ${{ steps.build_args.outputs.args }}
