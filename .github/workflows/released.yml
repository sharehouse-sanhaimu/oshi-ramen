name: Release Docker Build and Push

on:
  workflow_run:
    workflows: ["Release action"]
    types: [completed]

permissions:
  contents: read # 最小権限のみ許可

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # 旧ジョブ自動キャンセル
jobs:
  build-and-push:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30 # タイムアウト設定
    env:
      HARBOR: ${{ secrets.HARBOR_REG }}

    strategy:
      matrix:
        include:
          - context: api
            dockerfile: api/prod.Dockerfile
            image_name: sharehouse/oshi-ramen-api
          - context: view
            dockerfile: view/prod.Dockerfile
            image_name: sharehouse/oshi-ramen-view
          - context: magazine
            dockerfile: magazine/prod.Dockerfile
            image_name: sharehouse/oshi-ramen-magazine

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Secretsから.envファイルを作成
      - name: Create .env file from Secrets
        run: echo "${{ secrets.PROD_ENV }}" > .env

      # 3. .envファイルの内容をbuild-argsとして利用できるように整形
      - name: Generate build args from .env
        id: build_args
        run: |
          echo "ARGS<<EOF" >> $GITHUB_OUTPUT
          cat .env >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 4. 最新のタグを取得するシェルスクリプトを実行
      - name: Get latest tag
        id: get_tag
        run: |
          # タグ情報を最新にするためにfetchする
          git fetch --tags
          TAG=$(git tag --sort=-v:refname | head -n1)
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      # 5. QEMUエミュレーションのセットアップ
      - name: Set up QEMU for multi-arch
        uses: docker/setup-qemu-action@v3 # QEMU エミュレーション

      # 6. Docker Buildxのセットアップ
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # 永続ビルダー設定
        with:
          install: true
          buildkitd-flags: --debug

      # 7. Docker Hubへのログイン
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.HARBOR }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASS }}

      # 8. Docker Buildxを使用してマルチアーキテクチャのDockerイメージをビルドし、プッシュ
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          pull: true # 常に最新イメージ取得
          push: true
          tags: |
            ${{ env.HARBOR }}/${{ matrix.image_name }}:${{ steps.get_tag.outputs.TAG }}
            ${{ env.HARBOR }}/${{ matrix.image_name }}:latest
          build-args: ${{ steps.build_args.outputs.ARGS }}
          cache-from: |
            type=gha,scope=${{ matrix.image_name }}-cache
            type=registry,ref=${{ env.HARBOR }}/${{ matrix.image_name }}:cache
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.image_name }}-cache
            type=registry,ref=${{ env.HARBOR }}/${{ matrix.image_name }}:cache,mode=max,image-manifest=true

      # 9. Docker Buildxのキャッシュをプルーニング
      - name: Prune Buildx builder and caches
        if: always()
        run: |
          docker buildx prune --all --force
